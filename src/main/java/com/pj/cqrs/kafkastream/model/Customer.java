/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.pj.cqrs.kafkastream.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Customer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord
{
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Customer\",\"namespace\":\"com.kafkastream.model\",\"fields\":[{\"name\":\"customerId\",\"type\":\"string\"},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"phone\",\"type\":\"string\"}]}");
	private static final long serialVersionUID = 2729048783015827572L;
	private static final SpecificData MODEL$ = new SpecificData();
	private static final BinaryMessageEncoder<Customer> ENCODER =
			new BinaryMessageEncoder<Customer>(MODEL$, SCHEMA$);
	private static final BinaryMessageDecoder<Customer> DECODER =
			new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$);
	@SuppressWarnings("unchecked")
	private static final org.apache.avro.io.DatumWriter<Customer>
			WRITER$ = (org.apache.avro.io.DatumWriter<Customer>) MODEL$.createDatumWriter(SCHEMA$);
	@SuppressWarnings("unchecked")
	private static final org.apache.avro.io.DatumReader<Customer>
			READER$ = (org.apache.avro.io.DatumReader<Customer>) MODEL$.createDatumReader(SCHEMA$);
	@Deprecated
	public java.lang.CharSequence customerId;
	@Deprecated
	public java.lang.CharSequence firstName;
	@Deprecated
	public java.lang.CharSequence lastName;
	@Deprecated
	public java.lang.CharSequence email;
	@Deprecated
	public java.lang.CharSequence phone;
	/**
	 * Default constructor.  Note that this does not initialize fields
	 * to their default values from the schema.  If that is desired then
	 * one should use <code>newBuilder()</code>.
	 */
	public Customer()
	{
	}
	/**
	 * All-args constructor.
	 * @param customerId The new value for customerId
	 * @param firstName The new value for firstName
	 * @param lastName The new value for lastName
	 * @param email The new value for email
	 * @param phone The new value for phone
	 */
	public Customer(java.lang.CharSequence customerId, java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.lang.CharSequence email, java.lang.CharSequence phone)
	{
		this.customerId = customerId;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.phone = phone;
	}

	public static org.apache.avro.Schema getClassSchema()
	{
		return SCHEMA$;
	}

	/**
	 * Return the BinaryMessageEncoder instance used by this class.
	 * @return the message encoder used by this class
	 */
	public static BinaryMessageEncoder<Customer> getEncoder()
	{
		return ENCODER;
	}

	/**
	 * Return the BinaryMessageDecoder instance used by this class.
	 * @return the message decoder used by this class
	 */
	public static BinaryMessageDecoder<Customer> getDecoder()
	{
		return DECODER;
	}

	/**
	 * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
	 * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
	 * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
	 */
	public static BinaryMessageDecoder<Customer> createDecoder(SchemaStore resolver)
	{
		return new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$, resolver);
	}

	/**
	 * Deserializes a Customer from a ByteBuffer.
	 * @param b a byte buffer holding serialized data for an instance of this class
	 * @return a Customer instance decoded from the given buffer
	 * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
	 */
	public static Customer fromByteBuffer(
			java.nio.ByteBuffer b) throws java.io.IOException
	{
		return DECODER.decode(b);
	}

	/**
	 * Creates a new Customer RecordBuilder.
	 * @return A new Customer RecordBuilder
	 */
	public static Customer.Builder newBuilder()
	{
		return new Customer.Builder();
	}

	/**
	 * Creates a new Customer RecordBuilder by copying an existing Builder.
	 * @param other The existing builder to copy.
	 * @return A new Customer RecordBuilder
	 */
	public static Customer.Builder newBuilder(Customer.Builder other)
	{
		if (other == null)
		{
			return new Customer.Builder();
		}
		else
		{
			return new Customer.Builder(other);
		}
	}

	/**
	 * Creates a new Customer RecordBuilder by copying an existing Customer instance.
	 * @param other The existing instance to copy.
	 * @return A new Customer RecordBuilder
	 */
	public static Customer.Builder newBuilder(Customer other)
	{
		if (other == null)
		{
			return new Customer.Builder();
		}
		else
		{
			return new Customer.Builder(other);
		}
	}

	/**
	 * Serializes this Customer to a ByteBuffer.
	 * @return a buffer holding the serialized data for this instance
	 * @throws java.io.IOException if this instance could not be serialized
	 */
	public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException
	{
		return ENCODER.encode(this);
	}

	public org.apache.avro.Schema getSchema()
	{
		return SCHEMA$;
	}

	// Used by DatumWriter.  Applications should not call.
	public java.lang.Object get(int field$)
	{
		switch (field$)
		{
			case 0:
				return customerId;
			case 1:
				return firstName;
			case 2:
				return lastName;
			case 3:
				return email;
			case 4:
				return phone;
			default:
				throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	// Used by DatumReader.  Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(int field$, java.lang.Object value$)
	{
		switch (field$)
		{
			case 0:
				customerId = (java.lang.CharSequence) value$;
				break;
			case 1:
				firstName = (java.lang.CharSequence) value$;
				break;
			case 2:
				lastName = (java.lang.CharSequence) value$;
				break;
			case 3:
				email = (java.lang.CharSequence) value$;
				break;
			case 4:
				phone = (java.lang.CharSequence) value$;
				break;
			default:
				throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	public org.apache.avro.specific.SpecificData getSpecificData()
	{
		return MODEL$;
	}

	@Override
	public void writeExternal(java.io.ObjectOutput out)
			throws java.io.IOException
	{
		WRITER$.write(this, SpecificData.getEncoder(out));
	}

	@Override
	public void readExternal(java.io.ObjectInput in)
			throws java.io.IOException
	{
		READER$.read(this, SpecificData.getDecoder(in));
	}

	@Override
	protected boolean hasCustomCoders()
	{
		return true;
	}

	@Override
	public void customEncode(org.apache.avro.io.Encoder out)
			throws java.io.IOException
	{
		out.writeString(this.customerId);

		out.writeString(this.firstName);

		out.writeString(this.lastName);

		out.writeString(this.email);

		out.writeString(this.phone);

	}

	@Override
	public void customDecode(org.apache.avro.io.ResolvingDecoder in)
			throws java.io.IOException
	{
		org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
		if (fieldOrder == null)
		{
			this.customerId = in.readString(this.customerId instanceof Utf8 ? (Utf8) this.customerId : null);

			this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8) this.firstName : null);

			this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8) this.lastName : null);

			this.email = in.readString(this.email instanceof Utf8 ? (Utf8) this.email : null);

			this.phone = in.readString(this.phone instanceof Utf8 ? (Utf8) this.phone : null);

		}
		else
		{
			for (int i = 0; i < 5; i++)
			{
				switch (fieldOrder[i].pos())
				{
					case 0:
						this.customerId = in.readString(this.customerId instanceof Utf8 ? (Utf8) this.customerId : null);
						break;

					case 1:
						this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8) this.firstName : null);
						break;

					case 2:
						this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8) this.lastName : null);
						break;

					case 3:
						this.email = in.readString(this.email instanceof Utf8 ? (Utf8) this.email : null);
						break;

					case 4:
						this.phone = in.readString(this.phone instanceof Utf8 ? (Utf8) this.phone : null);
						break;

					default:
						throw new java.io.IOException("Corrupt ResolvingDecoder.");
				}
			}
		}
	}

	/**
	 * Gets the value of the 'customerId' field.
	 * @return The value of the 'customerId' field.
	 */
	public java.lang.CharSequence getCustomerId()
	{
		return customerId;
	}

	/**
	 * Sets the value of the 'customerId' field.
	 * @param value the value to set.
	 */
	public void setCustomerId(java.lang.CharSequence value)
	{
		this.customerId = value;
	}

	/**
	 * Gets the value of the 'firstName' field.
	 * @return The value of the 'firstName' field.
	 */
	public java.lang.CharSequence getFirstName()
	{
		return firstName;
	}

	/**
	 * Sets the value of the 'firstName' field.
	 * @param value the value to set.
	 */
	public void setFirstName(java.lang.CharSequence value)
	{
		this.firstName = value;
	}

	/**
	 * Gets the value of the 'lastName' field.
	 * @return The value of the 'lastName' field.
	 */
	public java.lang.CharSequence getLastName()
	{
		return lastName;
	}

	/**
	 * Sets the value of the 'lastName' field.
	 * @param value the value to set.
	 */
	public void setLastName(java.lang.CharSequence value)
	{
		this.lastName = value;
	}

	/**
	 * Gets the value of the 'email' field.
	 * @return The value of the 'email' field.
	 */
	public java.lang.CharSequence getEmail()
	{
		return email;
	}

	/**
	 * Sets the value of the 'email' field.
	 * @param value the value to set.
	 */
	public void setEmail(java.lang.CharSequence value)
	{
		this.email = value;
	}

	/**
	 * Gets the value of the 'phone' field.
	 * @return The value of the 'phone' field.
	 */
	public java.lang.CharSequence getPhone()
	{
		return phone;
	}

	/**
	 * Sets the value of the 'phone' field.
	 * @param value the value to set.
	 */
	public void setPhone(java.lang.CharSequence value)
	{
		this.phone = value;
	}

	/**
	 * RecordBuilder for Customer instances.
	 */
	public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Customer>
			implements org.apache.avro.data.RecordBuilder<Customer>
	{

		private java.lang.CharSequence customerId;
		private java.lang.CharSequence firstName;
		private java.lang.CharSequence lastName;
		private java.lang.CharSequence email;
		private java.lang.CharSequence phone;

		/** Creates a new Builder */
		private Builder()
		{
			super(SCHEMA$);
		}

		/**
		 * Creates a Builder by copying an existing Builder.
		 * @param other The existing Builder to copy.
		 */
		private Builder(Customer.Builder other)
		{
			super(other);
			if (isValidValue(fields()[0], other.customerId))
			{
				this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
				fieldSetFlags()[0] = other.fieldSetFlags()[0];
			}
			if (isValidValue(fields()[1], other.firstName))
			{
				this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
				fieldSetFlags()[1] = other.fieldSetFlags()[1];
			}
			if (isValidValue(fields()[2], other.lastName))
			{
				this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
				fieldSetFlags()[2] = other.fieldSetFlags()[2];
			}
			if (isValidValue(fields()[3], other.email))
			{
				this.email = data().deepCopy(fields()[3].schema(), other.email);
				fieldSetFlags()[3] = other.fieldSetFlags()[3];
			}
			if (isValidValue(fields()[4], other.phone))
			{
				this.phone = data().deepCopy(fields()[4].schema(), other.phone);
				fieldSetFlags()[4] = other.fieldSetFlags()[4];
			}
		}

		/**
		 * Creates a Builder by copying an existing Customer instance
		 * @param other The existing instance to copy.
		 */
		private Builder(Customer other)
		{
			super(SCHEMA$);
			if (isValidValue(fields()[0], other.customerId))
			{
				this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.firstName))
			{
				this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(fields()[2], other.lastName))
			{
				this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
				fieldSetFlags()[2] = true;
			}
			if (isValidValue(fields()[3], other.email))
			{
				this.email = data().deepCopy(fields()[3].schema(), other.email);
				fieldSetFlags()[3] = true;
			}
			if (isValidValue(fields()[4], other.phone))
			{
				this.phone = data().deepCopy(fields()[4].schema(), other.phone);
				fieldSetFlags()[4] = true;
			}
		}

		/**
		 * Gets the value of the 'customerId' field.
		 * @return The value.
		 */
		public java.lang.CharSequence getCustomerId()
		{
			return customerId;
		}


		/**
		 * Sets the value of the 'customerId' field.
		 * @param value The value of 'customerId'.
		 * @return This builder.
		 */
		public Customer.Builder setCustomerId(java.lang.CharSequence value)
		{
			validate(fields()[0], value);
			this.customerId = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/**
		 * Checks whether the 'customerId' field has been set.
		 * @return True if the 'customerId' field has been set, false otherwise.
		 */
		public boolean hasCustomerId()
		{
			return fieldSetFlags()[0];
		}


		/**
		 * Clears the value of the 'customerId' field.
		 * @return This builder.
		 */
		public Customer.Builder clearCustomerId()
		{
			customerId = null;
			fieldSetFlags()[0] = false;
			return this;
		}

		/**
		 * Gets the value of the 'firstName' field.
		 * @return The value.
		 */
		public java.lang.CharSequence getFirstName()
		{
			return firstName;
		}


		/**
		 * Sets the value of the 'firstName' field.
		 * @param value The value of 'firstName'.
		 * @return This builder.
		 */
		public Customer.Builder setFirstName(java.lang.CharSequence value)
		{
			validate(fields()[1], value);
			this.firstName = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/**
		 * Checks whether the 'firstName' field has been set.
		 * @return True if the 'firstName' field has been set, false otherwise.
		 */
		public boolean hasFirstName()
		{
			return fieldSetFlags()[1];
		}


		/**
		 * Clears the value of the 'firstName' field.
		 * @return This builder.
		 */
		public Customer.Builder clearFirstName()
		{
			firstName = null;
			fieldSetFlags()[1] = false;
			return this;
		}

		/**
		 * Gets the value of the 'lastName' field.
		 * @return The value.
		 */
		public java.lang.CharSequence getLastName()
		{
			return lastName;
		}


		/**
		 * Sets the value of the 'lastName' field.
		 * @param value The value of 'lastName'.
		 * @return This builder.
		 */
		public Customer.Builder setLastName(java.lang.CharSequence value)
		{
			validate(fields()[2], value);
			this.lastName = value;
			fieldSetFlags()[2] = true;
			return this;
		}

		/**
		 * Checks whether the 'lastName' field has been set.
		 * @return True if the 'lastName' field has been set, false otherwise.
		 */
		public boolean hasLastName()
		{
			return fieldSetFlags()[2];
		}


		/**
		 * Clears the value of the 'lastName' field.
		 * @return This builder.
		 */
		public Customer.Builder clearLastName()
		{
			lastName = null;
			fieldSetFlags()[2] = false;
			return this;
		}

		/**
		 * Gets the value of the 'email' field.
		 * @return The value.
		 */
		public java.lang.CharSequence getEmail()
		{
			return email;
		}


		/**
		 * Sets the value of the 'email' field.
		 * @param value The value of 'email'.
		 * @return This builder.
		 */
		public Customer.Builder setEmail(java.lang.CharSequence value)
		{
			validate(fields()[3], value);
			this.email = value;
			fieldSetFlags()[3] = true;
			return this;
		}

		/**
		 * Checks whether the 'email' field has been set.
		 * @return True if the 'email' field has been set, false otherwise.
		 */
		public boolean hasEmail()
		{
			return fieldSetFlags()[3];
		}


		/**
		 * Clears the value of the 'email' field.
		 * @return This builder.
		 */
		public Customer.Builder clearEmail()
		{
			email = null;
			fieldSetFlags()[3] = false;
			return this;
		}

		/**
		 * Gets the value of the 'phone' field.
		 * @return The value.
		 */
		public java.lang.CharSequence getPhone()
		{
			return phone;
		}


		/**
		 * Sets the value of the 'phone' field.
		 * @param value The value of 'phone'.
		 * @return This builder.
		 */
		public Customer.Builder setPhone(java.lang.CharSequence value)
		{
			validate(fields()[4], value);
			this.phone = value;
			fieldSetFlags()[4] = true;
			return this;
		}

		/**
		 * Checks whether the 'phone' field has been set.
		 * @return True if the 'phone' field has been set, false otherwise.
		 */
		public boolean hasPhone()
		{
			return fieldSetFlags()[4];
		}


		/**
		 * Clears the value of the 'phone' field.
		 * @return This builder.
		 */
		public Customer.Builder clearPhone()
		{
			phone = null;
			fieldSetFlags()[4] = false;
			return this;
		}

		@Override
		@SuppressWarnings("unchecked")
		public Customer build()
		{
			try
			{
				Customer record = new Customer();
				record.customerId = fieldSetFlags()[0] ? this.customerId : (java.lang.CharSequence) defaultValue(fields()[0]);
				record.firstName = fieldSetFlags()[1] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[1]);
				record.lastName = fieldSetFlags()[2] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[2]);
				record.email = fieldSetFlags()[3] ? this.email : (java.lang.CharSequence) defaultValue(fields()[3]);
				record.phone = fieldSetFlags()[4] ? this.phone : (java.lang.CharSequence) defaultValue(fields()[4]);
				return record;
			}
			catch (org.apache.avro.AvroMissingFieldException e)
			{
				throw e;
			}
			catch (java.lang.Exception e)
			{
				throw new org.apache.avro.AvroRuntimeException(e);
			}
		}
	}
}










